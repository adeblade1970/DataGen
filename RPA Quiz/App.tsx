
import React, { useState, useCallback, useEffect } from 'react';
import { Question, QuizState } from './types';
import { generateQuizQuestions } from './services/geminiService';
import { PASSING_SCORE, QUIZ_QUESTIONS_COUNT } from './constants';
import QuizCard from './components/QuizCard';
import ResultsScreen from './components/ResultsScreen';
import Spinner from './components/Spinner';

function App() {
  const [quizState, setQuizState] = useState<QuizState>(QuizState.START);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);
  const [userAnswers, setUserAnswers] = useState<string[]>([]);
  const [score, setScore] = useState<number>(0);
  const [error, setError] = useState<string | null>(null);

  const fetchQuestions = useCallback(async () => {
    setQuizState(QuizState.LOADING);
    setError(null);
    try {
      const fetchedQuestions = await generateQuizQuestions();
      if (fetchedQuestions.length < QUIZ_QUESTIONS_COUNT) {
        throw new Error("AI failed to generate enough questions. Please try again.");
      }
      setQuestions(fetchedQuestions);
      setQuizState(QuizState.QUIZ);
    } catch (err) {
      setError((err as Error).message);
      setQuizState(QuizState.ERROR);
    }
  }, []);

  const handleStartQuiz = () => {
    fetchQuestions();
  };

  const handleAnswerSelect = (answer: string) => {
    const newAnswers = [...userAnswers, answer];
    setUserAnswers(newAnswers);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      calculateResults(newAnswers);
      setQuizState(QuizState.RESULTS);
    }
  };

  const calculateResults = (finalAnswers: string[]) => {
    let currentScore = 0;
    questions.forEach((question, index) => {
      if (question.correctAnswer === finalAnswers[index]) {
        currentScore++;
      }
    });
    setScore(currentScore);
  };
  
  const handleRetakeQuiz = () => {
    setQuizState(QuizState.START);
    setQuestions([]);
    setCurrentQuestionIndex(0);
    setUserAnswers([]);
    setScore(0);
    setError(null);
  };

  const renderContent = () => {
    switch (quizState) {
      case QuizState.LOADING:
        return (
          <div className="text-center">
            <Spinner />
            <p className="mt-4 text-lg text-slate-300 animate-pulse">Generating your quiz...</p>
          </div>
        );
      case QuizState.QUIZ:
        return (
          <QuizCard
            question={questions[currentQuestionIndex]}
            questionNumber={currentQuestionIndex + 1}
            totalQuestions={questions.length}
            onAnswerSelect={handleAnswerSelect}
          />
        );
      case QuizState.RESULTS:
        return (
          <ResultsScreen
            score={score}
            totalQuestions={questions.length}
            passingScore={PASSING_SCORE}
            onRetake={handleRetakeQuiz}
          />
        );
      case QuizState.ERROR:
        return (
            <div className="text-center bg-slate-800 p-8 rounded-xl shadow-2xl">
                <h2 className="text-2xl font-bold text-red-400 mb-4">An Error Occurred</h2>
                <p className="text-slate-300 mb-6">{error}</p>
                <button
                    onClick={handleRetakeQuiz}
                    className="bg-sky-500 hover:bg-sky-600 text-white font-bold py-2 px-6 rounded-lg transition-transform duration-200 hover:scale-105"
                >
                    Try Again
                </button>
            </div>
        );
      case QuizState.START:
      default:
        return (
          <div className="text-center bg-slate-800 p-8 md:p-12 rounded-xl shadow-2xl max-w-2xl mx-auto">
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">Low-Code RPA Tools Quiz</h1>
            <p className="text-slate-300 mb-8">
              Test your knowledge with {QUIZ_QUESTIONS_COUNT} questions generated by AI. You need {PASSING_SCORE} correct answers to pass.
            </p>
            <button
              onClick={handleStartQuiz}
              className="bg-sky-500 hover:bg-sky-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-transform duration-200 hover:scale-105 shadow-lg"
            >
              Start Quiz
            </button>
          </div>
        );
    }
  };

  return (
    <main className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-slate-900 to-slate-800">
        <div className="w-full max-w-3xl">
            {renderContent()}
        </div>
    </main>
  );
}

export default App;
